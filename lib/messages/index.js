import { forEach } from 'lodash';

import config from '../config';
import { userFullName } from '../selector';
import dailyGame from './dailyGame.messages';

export const karma = {
  no_vote_voter_karma_nevagative: function({ voterKarma }) {
    return '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä–º–æ–π (' + voterKarma + ')';
  },
  no_vote_yourself: function() {
    return '–î–∞–≤–∞–π –±–µ–∑ –∫–∞—Ä–º–æ–¥—Ä–æ—á–µ—Ä—Å—Ç–≤–∞, –±—Ä–∞—Ç–∞–Ω';
  },
  too_many_votes: function() {
    return '–ù–µ–ª—å–∑—è —Ç–∞–∫ —á–∞—Å—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. –ö–∞—Ä–º–∞–¥—Ä–æ—á–µ—Ä—Å—Ç–≤–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.';
  },
  voter_increased_karma_to_target: function({ voter, voterKarma, target, targetNewKarma }) {
    return userFullName(voter) + ' (' + voterKarma + ') –ø–ª—é—Å–∞–Ω—É–ª –≤ –∫–∞—Ä–º—É ' + userFullName(target) + ' ('+ targetNewKarma +')';
  },
  voter_decreased_karma_to_target: function({ voter, voterKarma, target, targetNewKarma }) {
    return userFullName(voter) + ' (' + voterKarma + ') –Ω–∞—Å—Ä–∞–ª –≤ –∫–∞—Ä–º—É ' + userFullName(target) + ' ('+ targetNewKarma +')';
  },
  voter_try_to_change_bot_karma: function () {
    return '–£ –º–µ–Ω—è –Ω–µ—Ç –∫–∞—Ä–º—ã üòñüò´';
  },
  target_have_karma_ban: function ({ user }) {
    return '–£ ' + userFullName(user) + ' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∫–∞—Ä–º–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ';
  },
  voter_have_karma_ban: function () {
    return '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É –ª—é–¥—è–º';
  },
  top_karma_users: function ({ top }) {
    if (!top || top.length === 0) return '–ù–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–∞—Ä–º—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ';

    const rows = [];
    let index = 0;

    rows.push("üèÜ *–ö–∞—Ä–º–∞-–¢–æ–ø*");
    forEach(top, item => rows.push(++index + ') ' + userFullName(item.user) + ' ' + item.value));

    return rows.join("\n")
  },
  top_minus_karma_users: function ({ top }) {
    if (!top || top.length === 0) return '–ù–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä–º—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ';

    const rows = [];
    let index = 0;

    rows.push("üèÜ *–ö–∞—Ä–º–∞-–õ–æ—Ö-–¢–æ–ø*");
    forEach(top, item => rows.push(++index + ') ' + userFullName(item.user) + ' ' + item.value));

    return rows.join("\n")
  }
};

export const service = {
  bot_joined_group: function() {
    return '–ü–æ—à—É–º–∏–º –±–ª—è—Ç—å!';
  },
  someone_joined_group: function ({ user }) {
    return '–ü—Ä–∏–≤–µ—Ç, ' + userFullName(user) + '! –ö–∞–∫–æ–π —Ä–µ–π—Ç –Ω–∞ Upwork? –ö–∞–∫–æ–π –¥–æ—à–∏–∫ –ª—é–±–∏—à—å?';
  }
};

export const common = {
  chatMemberInfo: function ({ chatMember }) {
    const rows = [];

    rows.push("User: " + chatMember.first_name);
    if (chatMember.isAdmin === true) rows.push('Admin: *yes*');
    rows.push("Chat: " + chatMember.Chats[0].title);
    rows.push("Karma: " + chatMember.Chats[0].ChatPayload.karma);

    return rows.join("\n");
  },
  gitInfo: function () {
    return 'Contribute: ' + config.features.common.git.url + "\n" +
      "Author: " + config.features.common.git.author
  }
};

export default {
  karma,
  service,
  common,
  dailyGame,
}